// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { DeleteAdminV1Data, DeleteAdminV1Responses, DeleteAdminV1Errors, CreateAdminV1Data, CreateAdminV1Responses, CreateAdminV1Errors, DeleteSessionV1Data, DeleteSessionV1Responses, DeleteSessionV1Errors, GetSessionV1Data, GetSessionV1Responses, GetSessionV1Errors, CreateSessionV1Data, CreateSessionV1Responses, CreateSessionV1Errors, GetFoodsV1Data, GetFoodsV1Responses, GetFoodsV1Errors, BatchCreateFoodsV1Data, BatchCreateFoodsV1Responses, BatchCreateFoodsV1Errors, CompareFoodsV1Data, CompareFoodsV1Responses, GetFoodV1Data, GetFoodV1Responses, GetFoodV1Errors, UpdateFoodV1Data, UpdateFoodV1Responses, UpdateFoodV1Errors, CreateFoodV1Data, CreateFoodV1Responses, CreateFoodV1Errors, GetFoodGroupsV1Data, GetFoodGroupsV1Responses, CreateFoodGroupV1Data, CreateFoodGroupV1Responses, CreateFoodGroupV1Errors, GetLangualCodesV1Data, GetLangualCodesV1Responses, GetGroupedLangualCodesV1Data, GetGroupedLangualCodesV1Responses, GetNutrientsV1Data, GetNutrientsV1Responses, CreateNutrientV1Data, CreateNutrientV1Responses, CreateNutrientV1Errors, GetOriginsV1Data, GetOriginsV1Responses, CreateOriginV1Data, CreateOriginV1Responses, CreateOriginV1Errors, GetOriginV1Data, GetOriginV1Responses, GetOriginV1Errors, GetOriginChildrenV1Data, GetOriginChildrenV1Responses, GetOriginChildrenV1Errors, GetReferencesV1Data, GetReferencesV1Responses, GetReferencesV1Errors, BatchCreateReferencesV1Data, BatchCreateReferencesV1Responses, BatchCreateReferencesV1Errors, CreateReferenceV1Data, CreateReferenceV1Responses, CreateReferenceV1Errors, GetAuthorsV1Data, GetAuthorsV1Responses, GetCitiesV1Data, GetCitiesV1Responses, GetArticlesV1Data, GetArticlesV1Responses, GetJournalVolumesV1Data, GetJournalVolumesV1Responses, GetJournalsV1Data, GetJournalsV1Responses, GetScientificNamesV1Data, GetScientificNamesV1Responses, CreateScientificNameV1Data, CreateScientificNameV1Responses, CreateScientificNameV1Errors, GetSubspeciesV1Data, GetSubspeciesV1Responses, CreateSubspeciesV1Data, CreateSubspeciesV1Responses, CreateSubspeciesV1Errors, GetFoodTypesV1Data, GetFoodTypesV1Responses, CreateFoodTypeV1Data, CreateFoodTypeV1Responses, CreateFoodTypeV1Errors, GetLanguagesV1Data, GetLanguagesV1Responses, GetXlsxV1Data, GetXlsxV1Responses, GetXlsxV1Errors, ParseXlsxV1Data, ParseXlsxV1Responses, ParseXlsxV1Errors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * [ROOT ONLY] Delete an existing admin.
 */
export const deleteAdminV1 = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAdminV1Responses, DeleteAdminV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}',
        ...options
    });
};

/**
 * [ROOT ONLY] Create a new admin.
 */
export const createAdminV1 = <ThrowOnError extends boolean = false>(options: Options<CreateAdminV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAdminV1Responses, CreateAdminV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Delete an admin's session token.
 */
export const deleteSessionV1 = <ThrowOnError extends boolean = false>(options: Options<DeleteSessionV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSessionV1Responses, DeleteSessionV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}/session',
        ...options
    });
};

/**
 * Check if the admin's session token is valid.
 */
export const getSessionV1 = <ThrowOnError extends boolean = false>(options?: Options<GetSessionV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionV1Responses, GetSessionV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}/session',
        ...options
    });
};

/**
 * Create a new session token for an admin.
 */
export const createSessionV1 = <ThrowOnError extends boolean = false>(options: Options<CreateSessionV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSessionV1Responses, CreateSessionV1Errors, ThrowOnError>({
        url: '/admins/{username}/session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves foods based on query parameters.
 */
export const getFoodsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetFoodsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodsV1Responses, GetFoodsV1Errors, ThrowOnError>({
        url: '/foods',
        ...options
    });
};

/**
 * Creates multiple new foods in batch. If one food fails to be created, all changes are rolled back.
 */
export const batchCreateFoodsV1 = <ThrowOnError extends boolean = false>(options: Options<BatchCreateFoodsV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BatchCreateFoodsV1Responses, BatchCreateFoodsV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/foods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const compareFoodsV1 = <ThrowOnError extends boolean = false>(options?: Options<CompareFoodsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompareFoodsV1Responses, unknown, ThrowOnError>({
        url: '/foods/compare',
        ...options
    });
};

/**
 * Retrieves food based on its code.
 */
export const getFoodV1 = <ThrowOnError extends boolean = false>(options: Options<GetFoodV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFoodV1Responses, GetFoodV1Errors, ThrowOnError>({
        url: '/foods/{code}',
        ...options
    });
};

/**
 * Updates food based on its code.
 */
export const updateFoodV1 = <ThrowOnError extends boolean = false>(options: Options<UpdateFoodV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateFoodV1Responses, UpdateFoodV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/foods/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new food.
 */
export const createFoodV1 = <ThrowOnError extends boolean = false>(options: Options<CreateFoodV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodV1Responses, CreateFoodV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/foods/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all food groups.
 */
export const getFoodGroupsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetFoodGroupsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodGroupsV1Responses, unknown, ThrowOnError>({
        url: '/groups',
        ...options
    });
};

/**
 * Creates a new food group.
 */
export const createFoodGroupV1 = <ThrowOnError extends boolean = false>(options: Options<CreateFoodGroupV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodGroupV1Responses, CreateFoodGroupV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all LanguaL codes.
 */
export const getLangualCodesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetLangualCodesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLangualCodesV1Responses, unknown, ThrowOnError>({
        url: '/langual-codes',
        ...options
    });
};

/**
 * Retrieves all LanguaL codes grouped by parent code.
 */
export const getGroupedLangualCodesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetGroupedLangualCodesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupedLangualCodesV1Responses, unknown, ThrowOnError>({
        url: '/langual-codes/grouped',
        ...options
    });
};

/**
 * Retrieves all nutrients.
 */
export const getNutrientsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetNutrientsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNutrientsV1Responses, unknown, ThrowOnError>({
        url: '/nutrients',
        ...options
    });
};

/**
 * Creates a new nutrient.
 */
export const createNutrientV1 = <ThrowOnError extends boolean = false>(options: Options<CreateNutrientV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNutrientV1Responses, CreateNutrientV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/nutrients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all origins, optionally filtered by name.
 */
export const getOriginsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetOriginsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOriginsV1Responses, unknown, ThrowOnError>({
        url: '/origins',
        ...options
    });
};

/**
 * Creates a new origin.
 */
export const createOriginV1 = <ThrowOnError extends boolean = false>(options: Options<CreateOriginV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOriginV1Responses, CreateOriginV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/origins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves an origin by its ID.
 */
export const getOriginV1 = <ThrowOnError extends boolean = false>(options: Options<GetOriginV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOriginV1Responses, GetOriginV1Errors, ThrowOnError>({
        url: '/origins/{id}',
        ...options
    });
};

/**
 * Retrieves the children of an origin by its ID.
 */
export const getOriginChildrenV1 = <ThrowOnError extends boolean = false>(options: Options<GetOriginChildrenV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOriginChildrenV1Responses, GetOriginChildrenV1Errors, ThrowOnError>({
        url: '/origins/{id}/children',
        ...options
    });
};

/**
 * Retrieves references based on query parameters.
 */
export const getReferencesV1 = <ThrowOnError extends boolean = false>(options: Options<GetReferencesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetReferencesV1Responses, GetReferencesV1Errors, ThrowOnError>({
        url: '/references',
        ...options
    });
};

/**
 * Creates multiple new references in batch. If one reference fails to be created, all changes are rolled back.
 */
export const batchCreateReferencesV1 = <ThrowOnError extends boolean = false>(options: Options<BatchCreateReferencesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BatchCreateReferencesV1Responses, BatchCreateReferencesV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/references',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new reference.
 */
export const createReferenceV1 = <ThrowOnError extends boolean = false>(options: Options<CreateReferenceV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReferenceV1Responses, CreateReferenceV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/references/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all authors.
 */
export const getAuthorsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetAuthorsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthorsV1Responses, unknown, ThrowOnError>({
        url: '/references/authors',
        ...options
    });
};

/**
 * Retrieves all cities.
 */
export const getCitiesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetCitiesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCitiesV1Responses, unknown, ThrowOnError>({
        url: '/references/cities',
        ...options
    });
};

/**
 * Retrieves all articles.
 */
export const getArticlesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetArticlesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArticlesV1Responses, unknown, ThrowOnError>({
        url: '/references/articles',
        ...options
    });
};

/**
 * Retrieves all journal volumes.
 */
export const getJournalVolumesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetJournalVolumesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJournalVolumesV1Responses, unknown, ThrowOnError>({
        url: '/references/journal-volumes',
        ...options
    });
};

/**
 * Retrieves all journals.
 */
export const getJournalsV1 = <ThrowOnError extends boolean = false>(options?: Options<GetJournalsV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJournalsV1Responses, unknown, ThrowOnError>({
        url: '/references/journals',
        ...options
    });
};

/**
 * Retrieves all scientific names.
 */
export const getScientificNamesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetScientificNamesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScientificNamesV1Responses, unknown, ThrowOnError>({
        url: '/scientific-names',
        ...options
    });
};

/**
 * Creates a new scientific name.
 */
export const createScientificNameV1 = <ThrowOnError extends boolean = false>(options: Options<CreateScientificNameV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScientificNameV1Responses, CreateScientificNameV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/scientific-names',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all subspecies.
 */
export const getSubspeciesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetSubspeciesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubspeciesV1Responses, unknown, ThrowOnError>({
        url: '/subspecies',
        ...options
    });
};

/**
 * Creates a new subspecies.
 */
export const createSubspeciesV1 = <ThrowOnError extends boolean = false>(options: Options<CreateSubspeciesV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubspeciesV1Responses, CreateSubspeciesV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/subspecies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all food types.
 */
export const getFoodTypesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetFoodTypesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodTypesV1Responses, unknown, ThrowOnError>({
        url: '/types',
        ...options
    });
};

/**
 * Creates a new food type.
 */
export const createFoodTypeV1 = <ThrowOnError extends boolean = false>(options: Options<CreateFoodTypeV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodTypeV1Responses, CreateFoodTypeV1Errors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all languages.
 */
export const getLanguagesV1 = <ThrowOnError extends boolean = false>(options?: Options<GetLanguagesV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLanguagesV1Responses, unknown, ThrowOnError>({
        url: '/languages',
        ...options
    });
};

/**
 * Get foods and references data formatted in a XLSX file.
 */
export const getXlsxV1 = <ThrowOnError extends boolean = false>(options?: Options<GetXlsxV1Data, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetXlsxV1Responses, GetXlsxV1Errors, ThrowOnError>({
        url: '/xlsx',
        ...options
    });
};

/**
 * Parse the contents of a XLS(X) file into food and reference objects.
 * Each cell of the file is verified and flagged as `valid`, `new`, and/or `updated`.
 */
export const parseXlsxV1 = <ThrowOnError extends boolean = false>(options: Options<ParseXlsxV1Data, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseXlsxV1Responses, ParseXlsxV1Errors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/xlsx',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};