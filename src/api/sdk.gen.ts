// This file is auto-generated by @hey-api/openapi-ts

import { type Options as ClientOptions, type TDataShape, type Client, formDataBodySerializer } from '@hey-api/client-fetch';
import type { LoginData, LoginResponses, LoginErrors, LogoutData, LogoutResponses, LogoutErrors, GetSessionInfoData, GetSessionInfoResponses, GetSessionInfoErrors, DeleteAdminData, DeleteAdminResponses, DeleteAdminErrors, CreateAdminData, CreateAdminResponses, CreateAdminErrors, DeleteSessionData, DeleteSessionResponses, DeleteSessionErrors, GetSessionData, GetSessionResponses, GetSessionErrors, CreateSessionData, CreateSessionResponses, CreateSessionErrors, GetFoodsData, GetFoodsResponses, GetFoodsErrors, BatchCreateFoodsData, BatchCreateFoodsResponses, BatchCreateFoodsErrors, CompareFoodsData, CompareFoodsResponses, GetFoodData, GetFoodResponses, GetFoodErrors, UpdateFoodData, UpdateFoodResponses, UpdateFoodErrors, CreateFoodData, CreateFoodResponses, CreateFoodErrors, GetFoodGroupsData, GetFoodGroupsResponses, CreateFoodGroupData, CreateFoodGroupResponses, CreateFoodGroupErrors, GetLangualCodesData, GetLangualCodesResponses, GetGroupedLangualCodesData, GetGroupedLangualCodesResponses, GetNutrientsData, GetNutrientsResponses, CreateNutrientData, CreateNutrientResponses, CreateNutrientErrors, GetOriginsData, GetOriginsResponses, CreateOriginData, CreateOriginResponses, CreateOriginErrors, GetOriginData, GetOriginResponses, GetOriginErrors, GetOriginChildrenData, GetOriginChildrenResponses, GetOriginChildrenErrors, GetReferencesData, GetReferencesResponses, GetReferencesErrors, BatchCreateReferencesData, BatchCreateReferencesResponses, BatchCreateReferencesErrors, CreateReferenceData, CreateReferenceResponses, CreateReferenceErrors, GetAuthorsData, GetAuthorsResponses, GetCitiesData, GetCitiesResponses, GetArticlesData, GetArticlesResponses, GetJournalVolumesData, GetJournalVolumesResponses, GetJournalsData, GetJournalsResponses, GetScientificNamesData, GetScientificNamesResponses, CreateScientificNameData, CreateScientificNameResponses, CreateScientificNameErrors, GetSubspeciesData, GetSubspeciesResponses, CreateSubspeciesData, CreateSubspeciesResponses, CreateSubspeciesErrors, GetFoodTypesData, GetFoodTypesResponses, CreateFoodTypeData, CreateFoodTypeResponses, CreateFoodTypeErrors, GetLanguagesData, GetLanguagesResponses, GetXlsxData, GetXlsxResponses, GetXlsxErrors, ParseXlsxData, ParseXlsxResponses, ParseXlsxErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Login with username and password, and set cookie.
 */
export const login = <ThrowOnError extends boolean = false>(options: Options<LoginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LoginResponses, LoginErrors, ThrowOnError>({
        url: '/auth/login',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Logout and invalidate cookie.
 */
export const logout = <ThrowOnError extends boolean = false>(options?: Options<LogoutData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).post<LogoutResponses, LogoutErrors, ThrowOnError>({
        url: '/auth/logout',
        ...options
    });
};

/**
 * Get information about the currently logged-in admin.
 */
export const getSessionInfo = <ThrowOnError extends boolean = false>(options?: Options<GetSessionInfoData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionInfoResponses, GetSessionInfoErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/auth/me',
        ...options
    });
};

/**
 * [ROOT ONLY] Delete an existing admin.
 */
export const deleteAdmin = <ThrowOnError extends boolean = false>(options: Options<DeleteAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteAdminResponses, DeleteAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}',
        ...options
    });
};

/**
 * [ROOT ONLY] Create a new admin.
 */
export const createAdmin = <ThrowOnError extends boolean = false>(options: Options<CreateAdminData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateAdminResponses, CreateAdminErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/admins/{username}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Use POST /auth/logout instead. Delete an admin's session token.
 * @deprecated
 */
export const deleteSession = <ThrowOnError extends boolean = false>(options: Options<DeleteSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).delete<DeleteSessionResponses, DeleteSessionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/admins/{username}/session',
        ...options
    });
};

/**
 * Use GET /auth/me instead. Check if the admin's session token is valid.
 * @deprecated
 */
export const getSession = <ThrowOnError extends boolean = false>(options?: Options<GetSessionData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSessionResponses, GetSessionErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/admins/{username}/session',
        ...options
    });
};

/**
 * Use POST /auth/login instead. Create a new session token for an admin.
 * @deprecated
 */
export const createSession = <ThrowOnError extends boolean = false>(options: Options<CreateSessionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSessionResponses, CreateSessionErrors, ThrowOnError>({
        url: '/admins/{username}/session',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves foods based on query parameters.
 */
export const getFoods = <ThrowOnError extends boolean = false>(options?: Options<GetFoodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodsResponses, GetFoodsErrors, ThrowOnError>({
        url: '/foods',
        ...options
    });
};

/**
 * Creates multiple new foods in batch. If one food fails to be created, all changes are rolled back.
 */
export const batchCreateFoods = <ThrowOnError extends boolean = false>(options: Options<BatchCreateFoodsData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BatchCreateFoodsResponses, BatchCreateFoodsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/foods',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

export const compareFoods = <ThrowOnError extends boolean = false>(options?: Options<CompareFoodsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<CompareFoodsResponses, unknown, ThrowOnError>({
        url: '/foods/compare',
        ...options
    });
};

/**
 * Retrieves food based on its code.
 */
export const getFood = <ThrowOnError extends boolean = false>(options: Options<GetFoodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetFoodResponses, GetFoodErrors, ThrowOnError>({
        url: '/foods/{code}',
        ...options
    });
};

/**
 * Updates food based on its code.
 */
export const updateFood = <ThrowOnError extends boolean = false>(options: Options<UpdateFoodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).patch<UpdateFoodResponses, UpdateFoodErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/foods/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new food.
 */
export const createFood = <ThrowOnError extends boolean = false>(options: Options<CreateFoodData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodResponses, CreateFoodErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/foods/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all food groups.
 */
export const getFoodGroups = <ThrowOnError extends boolean = false>(options?: Options<GetFoodGroupsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodGroupsResponses, unknown, ThrowOnError>({
        url: '/groups',
        ...options
    });
};

/**
 * Creates a new food group.
 */
export const createFoodGroup = <ThrowOnError extends boolean = false>(options: Options<CreateFoodGroupData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodGroupResponses, CreateFoodGroupErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/groups',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all LanguaL codes.
 */
export const getLangualCodes = <ThrowOnError extends boolean = false>(options?: Options<GetLangualCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLangualCodesResponses, unknown, ThrowOnError>({
        url: '/langual-codes',
        ...options
    });
};

/**
 * Retrieves all LanguaL codes grouped by parent code.
 */
export const getGroupedLangualCodes = <ThrowOnError extends boolean = false>(options?: Options<GetGroupedLangualCodesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetGroupedLangualCodesResponses, unknown, ThrowOnError>({
        url: '/langual-codes/grouped',
        ...options
    });
};

/**
 * Retrieves all nutrients.
 */
export const getNutrients = <ThrowOnError extends boolean = false>(options?: Options<GetNutrientsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetNutrientsResponses, unknown, ThrowOnError>({
        url: '/nutrients',
        ...options
    });
};

/**
 * Creates a new nutrient.
 */
export const createNutrient = <ThrowOnError extends boolean = false>(options: Options<CreateNutrientData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateNutrientResponses, CreateNutrientErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/nutrients',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all origins, optionally filtered by name.
 */
export const getOrigins = <ThrowOnError extends boolean = false>(options?: Options<GetOriginsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOriginsResponses, unknown, ThrowOnError>({
        url: '/origins',
        ...options
    });
};

/**
 * Creates a new origin.
 */
export const createOrigin = <ThrowOnError extends boolean = false>(options: Options<CreateOriginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateOriginResponses, CreateOriginErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/origins',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves an origin by its ID.
 */
export const getOrigin = <ThrowOnError extends boolean = false>(options: Options<GetOriginData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOriginResponses, GetOriginErrors, ThrowOnError>({
        url: '/origins/{id}',
        ...options
    });
};

/**
 * Retrieves the children of an origin by its ID.
 */
export const getOriginChildren = <ThrowOnError extends boolean = false>(options: Options<GetOriginChildrenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetOriginChildrenResponses, GetOriginChildrenErrors, ThrowOnError>({
        url: '/origins/{id}/children',
        ...options
    });
};

/**
 * Retrieves references based on query parameters.
 */
export const getReferences = <ThrowOnError extends boolean = false>(options?: Options<GetReferencesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetReferencesResponses, GetReferencesErrors, ThrowOnError>({
        url: '/references',
        ...options
    });
};

/**
 * Creates multiple new references in batch. If one reference fails to be created, all changes are rolled back.
 */
export const batchCreateReferences = <ThrowOnError extends boolean = false>(options: Options<BatchCreateReferencesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BatchCreateReferencesResponses, BatchCreateReferencesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/references',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Creates a new reference.
 */
export const createReference = <ThrowOnError extends boolean = false>(options: Options<CreateReferenceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateReferenceResponses, CreateReferenceErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/references/{code}',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all authors.
 */
export const getAuthors = <ThrowOnError extends boolean = false>(options?: Options<GetAuthorsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAuthorsResponses, unknown, ThrowOnError>({
        url: '/references/authors',
        ...options
    });
};

/**
 * Retrieves all cities.
 */
export const getCities = <ThrowOnError extends boolean = false>(options?: Options<GetCitiesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetCitiesResponses, unknown, ThrowOnError>({
        url: '/references/cities',
        ...options
    });
};

/**
 * Retrieves all articles.
 */
export const getArticles = <ThrowOnError extends boolean = false>(options?: Options<GetArticlesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetArticlesResponses, unknown, ThrowOnError>({
        url: '/references/articles',
        ...options
    });
};

/**
 * Retrieves all journal volumes.
 */
export const getJournalVolumes = <ThrowOnError extends boolean = false>(options?: Options<GetJournalVolumesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJournalVolumesResponses, unknown, ThrowOnError>({
        url: '/references/journal-volumes',
        ...options
    });
};

/**
 * Retrieves all journals.
 */
export const getJournals = <ThrowOnError extends boolean = false>(options?: Options<GetJournalsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetJournalsResponses, unknown, ThrowOnError>({
        url: '/references/journals',
        ...options
    });
};

/**
 * Retrieves all scientific names.
 */
export const getScientificNames = <ThrowOnError extends boolean = false>(options?: Options<GetScientificNamesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetScientificNamesResponses, unknown, ThrowOnError>({
        url: '/scientific-names',
        ...options
    });
};

/**
 * Creates a new scientific name.
 */
export const createScientificName = <ThrowOnError extends boolean = false>(options: Options<CreateScientificNameData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateScientificNameResponses, CreateScientificNameErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/scientific-names',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all subspecies.
 */
export const getSubspecies = <ThrowOnError extends boolean = false>(options?: Options<GetSubspeciesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetSubspeciesResponses, unknown, ThrowOnError>({
        url: '/subspecies',
        ...options
    });
};

/**
 * Creates a new subspecies.
 */
export const createSubspecies = <ThrowOnError extends boolean = false>(options: Options<CreateSubspeciesData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateSubspeciesResponses, CreateSubspeciesErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/subspecies',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all food types.
 */
export const getFoodTypes = <ThrowOnError extends boolean = false>(options?: Options<GetFoodTypesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetFoodTypesResponses, unknown, ThrowOnError>({
        url: '/types',
        ...options
    });
};

/**
 * Creates a new food type.
 */
export const createFoodType = <ThrowOnError extends boolean = false>(options: Options<CreateFoodTypeData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<CreateFoodTypeResponses, CreateFoodTypeErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/types',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options.headers
        }
    });
};

/**
 * Retrieves all languages.
 */
export const getLanguages = <ThrowOnError extends boolean = false>(options?: Options<GetLanguagesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLanguagesResponses, unknown, ThrowOnError>({
        url: '/languages',
        ...options
    });
};

/**
 * Get foods and references data formatted in a XLSX file.
 */
export const getXlsx = <ThrowOnError extends boolean = false>(options?: Options<GetXlsxData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetXlsxResponses, GetXlsxErrors, ThrowOnError>({
        url: '/xlsx',
        ...options
    });
};

/**
 * Parse the contents of a XLS(X) file into food and reference objects.
 * Each cell of the file is verified and flagged as `valid`, `new`, and/or `updated`.
 */
export const parseXlsx = <ThrowOnError extends boolean = false>(options: Options<ParseXlsxData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ParseXlsxResponses, ParseXlsxErrors, ThrowOnError>({
        ...formDataBodySerializer,
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            },
            {
                in: 'cookie',
                name: '',
                type: 'apiKey'
            }
        ],
        url: '/xlsx',
        ...options,
        headers: {
            'Content-Type': null,
            ...options.headers
        }
    });
};
